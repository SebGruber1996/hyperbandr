% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hyperband2.R
\name{hyperband2}
\alias{hyperband2}
\title{Hyperband}
\usage{
hyperband2(max.perf = TRUE, max.ressources = 81, prop.discard = 3, id,
  par.set, sample.fun, train.fun, performance.fun, ...)
}
\arguments{
\item{max.perf}{[\code{logical()}]\cr
TRUE if to maximize the performance (e.g. accuracy of a neural net), 
FALSE if to minimize the performance (e.g. find the minimum of the branin function). \cr
Default: TRUE}

\item{max.ressources}{[\code{integer()}]\cr
The maximum amount of resource that canbe allocated to a single configuration}

\item{prop.discard}{[\code{integer()}]\cr
An input that controls the proportion of configurations discarded in each round of successive halving}

\item{id}{[\code{string}]\cr
An id for each Algorithm object in the bracket object}

\item{par.set}{\cr
The parameter set to sample from}

\item{sample.fun}{\cr
The function to sample from par.set}

\item{train.fun}{\cr
The function to carry out training}

\item{performance.fun}{The function to measure the performance}
}
\value{
List of brackets
}
\description{
Runs hyperband
}
\examples{
# simple example for the branin function (minimization problem)
library("smoof")
problem = makeBraninFunction()

# configuration space:
configSpace = makeParamSet(
  makeNumericParam(id = "x1", lower = -5, upper = 10.1))
  
# sampling function:
sample.fun = function(par.set, n.configs) {
 sampleValues(par = par.set, n = n.configs)
}
 
# model initialization function:
init.fun = function(r, config) {
  x1 = unname(unlist(config))
  x2 = runif(1, 0, 15)
  mod = c(x1, x2)
  return(mod)
}
# training function:
train.fun = function(mod, budget) {
  for(i in seq_len(budget)) {
    mod.new = c(mod[[1]], mod[[2]] + rnorm(1, sd = 3))
    if(performance.fun(mod.new) < performance.fun(mod))
      mod = mod.new
  }
  return(mod)
}

# performance function:
performance.fun = function(model) {
  problem(c(model[[1]], model[[2]]))
}

# compute hyperband:
hyperhyper = hyperband(
  # hyperband
  max.perf = FALSE, 
  max.ressources = 81, 
  prop.discard = 3, 
  id = "neural_net", 
  par.set = configSpace, 
  sample.fun =  sample.fun,
  train.fun = train.fun, 
  performance.fun = performance.fun
)

# visualize the results (red: global minima, blue: result of each bracket)
opt = data.table(x1 = getGlobalOptimum(problem)$param$x1, x2 = getGlobalOptimum(problem)$param$x2)
(vis = autoplot(problem) 
  + geom_point(data = opt, aes(x = x1, y = x2), 
               shape = 4, colour = "red", size = 5)
  + geom_point(aes(x = hyperhyper[[1]]$models[[1]]$model[1], 
                            y = hyperhyper[[1]]$models[[1]]$model[2]), 
                        shape = 4, colour = "blue", size = 5)
  + geom_point(aes(x = hyperhyper[[2]]$models[[1]]$model[1],
                   y = hyperhyper[[2]]$models[[1]]$model[2]),
               shape = 4, colour = "blue", size = 5) 
  + geom_point(aes(x = hyperhyper[[3]]$models[[1]]$model[1],
                   y = hyperhyper[[3]]$models[[1]]$model[2]),
               shape = 4, colour = "blue", size = 5)
  + geom_point(aes(x = hyperhyper[[4]]$models[[1]]$model[1],
                   y = hyperhyper[[4]]$models[[1]]$model[2]),
               shape = 4, colour = "blue", size = 5)
  + geom_point(aes(x = hyperhyper[[5]]$models[[1]]$model[1],
                   y = hyperhyper[[5]]$models[[1]]$model[2]),
               shape = 4, colour = "blue", size = 5))
}

