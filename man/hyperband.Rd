% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hyperband.R
\name{hyperband}
\alias{hyperband}
\title{Hyperband}
\usage{
hyperband(problem, max.resources = 81, prop.discard = 3, max.perf = TRUE,
  id, par.set, sample.fun, init.fun, train.fun, performance.fun, ...)
}
\arguments{
\item{max.resources}{[\code{integer()}]\cr
The maximum amount of resource that canbe allocated to a single configuration}

\item{prop.discard}{[\code{integer()}]\cr
An input that controls the proportion of configurations discarded in each round of successive halving}

\item{max.perf}{[\code{logical()}]\cr
TRUE if to maximize the performance (e.g. accuracy of a neural net), 
FALSE if to minimize the performance (e.g. find the minimum of the branin function). \cr
Default: TRUE}

\item{id}{[\code{string}]\cr
An id for each Algorithm object in the bracket object}

\item{par.set}{\cr
The parameter set to sample from}

\item{sample.fun}{\cr
The function to sample from par.set}

\item{train.fun}{\cr
The function to carry out training}

\item{performance.fun}{The function to measure the performance}
}
\value{
List of brackets
}
\description{
Runs hyperband
}
\examples{

# we need some packages
library("ggplot2")
library("smoof")
library("data.table")
library("dplyr")

# simple example for the branin function, a minimization problem
problem = makeBraninFunction()
opt = data.table(x1 = getGlobalOptimum(problem)$param$x1, x2 = getGlobalOptimum(problem)$param$x2)
# the three red dots are global minima
autoplot(problem) + geom_point(data = opt, aes(x = x1, y = x2), shape = 20, colour = "red", size = 5)

# config space
configSpace = makeParamSet(
    makeNumericParam(id = "x1", lower = -5, upper = 10.1))

# sample fun
sample.fun = function(par.set, n.configs, ...) {
  sampleValues(par = par.set, n = n.configs)
}

# init fun
init.fun = function(r, config) {
  x1 = unname(unlist(config))
  x2 = runif(1, 0, 15)
  mod = c(x1, x2)
  return(mod)
}

# train fun
train.fun = function(mod, budget) {
  for(i in seq_len(budget)) {
    mod.new = c(mod[[1]], mod[[2]] + rnorm(1, sd = 3))
    if(performance.fun(mod.new) < performance.fun(mod))
      mod = mod.new
  }
  return(mod)
}

# performance fun
performance.fun = function(model) {
  problem(c(model[[1]], model[[2]]))
}
 
########### call hyperband ############ 
hyperhyper = hyperband(
  max.resources = 81, 
  prop.discard = 3,  
  max.perf = FALSE,
  id = "branin", 
  par.set = configSpace, 
  sample.fun =  sample.fun,
  train.fun = train.fun, 
  performance.fun = performance.fun)

# get performance and visualize brackets
lapply(hyperhyper, function(x) x$visPerformances())
lapply(hyperhyper, function(x) x$getPerformances())
}
